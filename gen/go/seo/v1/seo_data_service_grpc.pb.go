// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package seo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SEODataServiceClient is the client API for SEODataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SEODataServiceClient interface {
	// Creates the SEO data.
	CreateSEOData(ctx context.Context, in *CreateSEODataRequest, opts ...grpc.CallOption) (*SEOData, error)
	// Retrieves the SEO data matching the SEO data query.
	GetSEOData(ctx context.Context, in *GetSEODataRequest, opts ...grpc.CallOption) (*SEOData, error)
	// Lists the SEO data.
	ListSEOData(ctx context.Context, in *ListSEODataRequest, opts ...grpc.CallOption) (*ListSEODataResponse, error)
	// Updates the SEO data.
	UpdateSEOData(ctx context.Context, in *UpdateSEODataRequest, opts ...grpc.CallOption) (*SEOData, error)
	// Deletes the SEO data.
	DeleteSEOData(ctx context.Context, in *DeleteSEODataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sEODataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSEODataServiceClient(cc grpc.ClientConnInterface) SEODataServiceClient {
	return &sEODataServiceClient{cc}
}

func (c *sEODataServiceClient) CreateSEOData(ctx context.Context, in *CreateSEODataRequest, opts ...grpc.CallOption) (*SEOData, error) {
	out := new(SEOData)
	err := c.cc.Invoke(ctx, "/garwinapis.seo.v1.SEODataService/CreateSEOData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEODataServiceClient) GetSEOData(ctx context.Context, in *GetSEODataRequest, opts ...grpc.CallOption) (*SEOData, error) {
	out := new(SEOData)
	err := c.cc.Invoke(ctx, "/garwinapis.seo.v1.SEODataService/GetSEOData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEODataServiceClient) ListSEOData(ctx context.Context, in *ListSEODataRequest, opts ...grpc.CallOption) (*ListSEODataResponse, error) {
	out := new(ListSEODataResponse)
	err := c.cc.Invoke(ctx, "/garwinapis.seo.v1.SEODataService/ListSEOData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEODataServiceClient) UpdateSEOData(ctx context.Context, in *UpdateSEODataRequest, opts ...grpc.CallOption) (*SEOData, error) {
	out := new(SEOData)
	err := c.cc.Invoke(ctx, "/garwinapis.seo.v1.SEODataService/UpdateSEOData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEODataServiceClient) DeleteSEOData(ctx context.Context, in *DeleteSEODataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/garwinapis.seo.v1.SEODataService/DeleteSEOData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SEODataServiceServer is the server API for SEODataService service.
// All implementations must embed UnimplementedSEODataServiceServer
// for forward compatibility
type SEODataServiceServer interface {
	// Creates the SEO data.
	CreateSEOData(context.Context, *CreateSEODataRequest) (*SEOData, error)
	// Retrieves the SEO data matching the SEO data query.
	GetSEOData(context.Context, *GetSEODataRequest) (*SEOData, error)
	// Lists the SEO data.
	ListSEOData(context.Context, *ListSEODataRequest) (*ListSEODataResponse, error)
	// Updates the SEO data.
	UpdateSEOData(context.Context, *UpdateSEODataRequest) (*SEOData, error)
	// Deletes the SEO data.
	DeleteSEOData(context.Context, *DeleteSEODataRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSEODataServiceServer()
}

// UnimplementedSEODataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSEODataServiceServer struct {
}

func (UnimplementedSEODataServiceServer) CreateSEOData(context.Context, *CreateSEODataRequest) (*SEOData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSEOData not implemented")
}
func (UnimplementedSEODataServiceServer) GetSEOData(context.Context, *GetSEODataRequest) (*SEOData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSEOData not implemented")
}
func (UnimplementedSEODataServiceServer) ListSEOData(context.Context, *ListSEODataRequest) (*ListSEODataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSEOData not implemented")
}
func (UnimplementedSEODataServiceServer) UpdateSEOData(context.Context, *UpdateSEODataRequest) (*SEOData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSEOData not implemented")
}
func (UnimplementedSEODataServiceServer) DeleteSEOData(context.Context, *DeleteSEODataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSEOData not implemented")
}
func (UnimplementedSEODataServiceServer) mustEmbedUnimplementedSEODataServiceServer() {}

// UnsafeSEODataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SEODataServiceServer will
// result in compilation errors.
type UnsafeSEODataServiceServer interface {
	mustEmbedUnimplementedSEODataServiceServer()
}

func RegisterSEODataServiceServer(s grpc.ServiceRegistrar, srv SEODataServiceServer) {
	s.RegisterService(&SEODataService_ServiceDesc, srv)
}

func _SEODataService_CreateSEOData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSEODataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEODataServiceServer).CreateSEOData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/garwinapis.seo.v1.SEODataService/CreateSEOData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEODataServiceServer).CreateSEOData(ctx, req.(*CreateSEODataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEODataService_GetSEOData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSEODataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEODataServiceServer).GetSEOData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/garwinapis.seo.v1.SEODataService/GetSEOData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEODataServiceServer).GetSEOData(ctx, req.(*GetSEODataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEODataService_ListSEOData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSEODataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEODataServiceServer).ListSEOData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/garwinapis.seo.v1.SEODataService/ListSEOData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEODataServiceServer).ListSEOData(ctx, req.(*ListSEODataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEODataService_UpdateSEOData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSEODataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEODataServiceServer).UpdateSEOData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/garwinapis.seo.v1.SEODataService/UpdateSEOData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEODataServiceServer).UpdateSEOData(ctx, req.(*UpdateSEODataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEODataService_DeleteSEOData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSEODataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEODataServiceServer).DeleteSEOData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/garwinapis.seo.v1.SEODataService/DeleteSEOData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEODataServiceServer).DeleteSEOData(ctx, req.(*DeleteSEODataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SEODataService_ServiceDesc is the grpc.ServiceDesc for SEODataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SEODataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "garwinapis.seo.v1.SEODataService",
	HandlerType: (*SEODataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSEOData",
			Handler:    _SEODataService_CreateSEOData_Handler,
		},
		{
			MethodName: "GetSEOData",
			Handler:    _SEODataService_GetSEOData_Handler,
		},
		{
			MethodName: "ListSEOData",
			Handler:    _SEODataService_ListSEOData_Handler,
		},
		{
			MethodName: "UpdateSEOData",
			Handler:    _SEODataService_UpdateSEOData_Handler,
		},
		{
			MethodName: "DeleteSEOData",
			Handler:    _SEODataService_DeleteSEOData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "garwinapis/seo/v1/seo_data_service.proto",
}
